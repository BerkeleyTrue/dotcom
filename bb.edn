{:pods {clj-kondo/clj-kondo {:version "2024.03.05"}}
 :deps {io.github.borkdude/quickblog {:local/root "../quickblog"}
        org.babashka/cli {:mvn/version "0.3.31"}}
 :paths ["."]
 :tasks
 {:requires ([babashka.fs :as fs]
             [quickblog.api :as r]
             [babashka.cli :as cli])

  :init (def opts
          (merge (cli/parse-opts *command-line-args*)
                 {:blog-author "Berkeley Martinez"
                  :blog-title "Berkeley True"
                  :blog-description "Doing tech, one line of code at a time."
                  :out-dir "out"
                  :blog-root "https://berkeleytrue.com/"
                  :discuss-link "https://github.com/berkeleytrue/dotcom/discussions/categories/posts"
                  :about-link "https://berkeleytrue.com/about"
                  :favicon false
                  :posts-dir "data"
                  :assets-dir "public"
                  :port 3000
                  :favicon-dir "public/favicon"}))

  new {:doc "Create new blog article"
       :task (r/new opts)}

  render {:doc "Render blog"
          :task (r/quickblog opts)}

  clean {:doc "Remove .work and out directory"
         :task (do (fs/delete-tree ".work")
                   (fs/delete-tree "out"))}

  css {:doc "Compile Tailwind CSS to out/style.css"
       :task (shell "tailwindcss -i templates/style.css -o out/style.css")}

  dev:css {:doc "Watch Tailwind CSS and compile to out/style.css"
           :task (shell "tailwindcss -i templates/style.css -o out/style.css --watch")}

  dev:templates  {:doc "Watch posts and templates and call render on file changes, starts file server"
                  :task (r/watch opts)}

  -dev {:depends [dev:templates dev:css]}

  dev {:doc "Start development server with file watching and live reload."
       :depends [clean render css]
       :task (run '-dev {:parallel true})}

  build {:doc "Build blog"
         :depends [clean render css]}

  quickblog {:doc "Start blogging quickly! Run `bb quickblog help` for details."
             :requires ([quickblog.cli :as qcli])
             :task (qcli/dispatch opts)}}}
